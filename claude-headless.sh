#!/bin/bash

# Claude Code Headless Automation Script
# Implements Alpha Mode protocols in headless mode

set -e

echo "🚀 Claude Code Alpha Mode - Headless Automation"
echo "================================================="

# Configuration
WORKSPACE_DIR=${1:-$(pwd)}
TASK_DESCRIPTION=${2:-"headless alpha mode validation"}

echo "📁 Workspace: $WORKSPACE_DIR"
echo "📋 Task: $TASK_DESCRIPTION"

# Pre-execution workspace check
echo "🔍 Pre-execution workspace validation..."
cd "$WORKSPACE_DIR"

if ls test_*.* *_test.* *.tmp *.log 2>/dev/null; then
    echo "⚠️ Test/temp files found - cleaning up..."
    rm -f test_*.* *_test.* *.tmp *.log 2>/dev/null
    echo "✅ Workspace cleaned"
else
    echo "✅ Workspace already clean"
fi

# Headless execution functions
run_alpha_validation() {
    echo "🎯 Running Alpha Mode validation..."
    
    # Check error handling
    echo "  - Checking error handling patterns..."
    if grep -r "try\|catch\|except\|error" --include="*.py" --include="*.js" --include="*.ts" . >/dev/null 2>&1; then
        echo "    ✅ Error handling patterns found"
    else
        echo "    ⚠️ No error handling patterns detected"
    fi
    
    # Check type annotations
    echo "  - Checking type annotations..."
    if find . -name "*.py" -exec grep -l "def.*:" {} \; >/dev/null 2>&1; then
        echo "    ✅ Type annotations found"
    else
        echo "    ⚠️ No type annotations detected"
    fi
    
    # Check tests
    echo "  - Checking test coverage..."
    if find . -name "*test*" -o -name "*spec*" >/dev/null 2>&1; then
        echo "    ✅ Test files found"
    else
        echo "    ⚠️ No test files detected"
    fi
}

run_code_analysis() {
    echo "📊 Running code analysis..."
    
    local prompt="Analyze this codebase for production readiness. Check for: 1) Error handling completeness, 2) Edge case coverage, 3) Performance optimization opportunities, 4) Security vulnerabilities, 5) Code pattern consistency. Return a structured report."
    
    claude --print "$prompt" > analysis_report.txt 2>&1
    
    if [ $? -eq 0 ]; then
        echo "✅ Code analysis completed - report saved to analysis_report.txt"
    else
        echo "⚠️ Code analysis failed or partial results"
    fi
}

run_automated_fixes() {
    echo "🔧 Running automated fixes..."
    
    local fix_prompt="Review this codebase and automatically fix any obvious issues: missing error handling, missing type hints, obvious security vulnerabilities, performance issues. Apply fixes directly to files."
    
    claude --print "$fix_prompt"
    
    if [ $? -eq 0 ]; then
        echo "✅ Automated fixes applied"
    else
        echo "⚠️ Some fixes may have failed"
    fi
}

generate_report() {
    echo "📋 Generating final report..."
    
    local report_file="alpha_mode_report_$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# Alpha Mode Headless Execution Report

**Timestamp:** $(date)
**Workspace:** $WORKSPACE_DIR
**Task:** $TASK_DESCRIPTION

## Execution Summary

### Pre-Execution Validation
- Workspace cleanup: ✅ Completed
- Initial file count: $(ls -1 | wc -l) files

### Code Analysis Results
$([ -f analysis_report.txt ] && cat analysis_report.txt || echo "Analysis report not available")

### Post-Execution Status
- Final workspace state: $(ls -1 | wc -l) files
- Test files remaining: $(ls test_*.* *_test.* 2>/dev/null | wc -l || echo "0")
- Temp files remaining: $(ls *.tmp *.log 2>/dev/null | wc -l || echo "0")

### Alpha Mode Compliance
- Error handling: $(grep -r "try\|catch\|except" --include="*.py" --include="*.js" --include="*.ts" . >/dev/null 2>&1 && echo "✅ Detected" || echo "❌ Missing")
- Type annotations: $(find . -name "*.py" -exec grep -l "def.*:" {} \; >/dev/null 2>&1 && echo "✅ Found" || echo "❌ Missing")
- Test coverage: $(find . -name "*test*" -o -name "*spec*" >/dev/null 2>&1 && echo "✅ Present" || echo "❌ Absent")
- Workspace cleanliness: $(ls test_*.* *_test.* *.tmp *.log 2>/dev/null && echo "❌ Files found" || echo "✅ Clean")

## Recommendations

1. Ensure all functions have proper error handling
2. Add type annotations to improve code quality
3. Implement comprehensive test coverage
4. Maintain clean workspace practices

---
Generated by Claude Code Alpha Mode Headless Automation
EOF

    echo "✅ Report generated: $report_file"
}

# Post-execution cleanup
cleanup_workspace() {
    echo "🧹 Final workspace cleanup..."
    
    # Remove test files
    if ls test_*.* *_test.* *.tmp *.log 2>/dev/null; then
        rm -f test_*.* *_test.* *.tmp *.log 2>/dev/null
        echo "✅ Test/temp files cleaned"
    fi
    
    # Clean up analysis artifacts (optional - keep reports)
    # rm -f analysis_report.txt
    
    echo "✅ Workspace cleanup complete"
}

# Main execution flow
main() {
    echo "🎯 Starting Alpha Mode headless execution..."
    
    # Run validation steps
    run_alpha_validation
    
    # Run automated analysis
    run_code_analysis
    
    # Run automated fixes (commented out for safety)
    # run_automated_fixes
    
    # Generate report
    generate_report
    
    # Final cleanup
    cleanup_workspace
    
    echo ""
    echo "🎉 Alpha Mode headless execution complete!"
    echo "📊 Check the generated report for detailed results"
    echo "✅ Workspace is clean and ready for next operation"
}

# Execute main function
main "$@"